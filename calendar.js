// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var AVG_WEEKS, DAY_ABBREVIATIONS, MAX_WEEKS, MONTH_ABBREVIATIONS, N_MONTHS, N_WEEKDAYS, fadeIn, fadeOut, flushStyle, formatDate, formatDayOfMonth, formatDayOfWeek, formatWeek, getDayOfMonth, getDayOfWeek, getWeek, onCssTransitionEnd;

  DAY_ABBREVIATIONS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

  MONTH_ABBREVIATIONS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

  AVG_WEEKS = 52.14;

  MAX_WEEKS = 54;

  N_MONTHS = 12;

  N_WEEKDAYS = 7;

  flushStyle = function(elem) {
    window.getComputedStyle(elem).display;
  };

  onCssTransitionEnd = function(f) {
    this.addEventListener("transitionend", f);
    this.addEventListener("webkitTransitionEnd", f);
    return this;
  };

  fadeIn = function(selection) {
    return selection.style("opacity", 0).each(function() {
      flushStyle(this);
      this.style.opacity = 1;
    });
  };

  fadeOut = function(selection) {
    return selection.style("opacity", 0).each(function() {
      onCssTransitionEnd.call(this, function() {
        var _ref;
        return (_ref = this.parentNode) != null ? _ref.removeChild(this) : void 0;
      });
    });
  };

  formatDate = d3.time.format("%Y-%m-%d");

  formatWeek = d3.time.format("%U");

  getWeek = function(t) {
    return +formatWeek(t);
  };

  formatDayOfMonth = d3.time.format("%d");

  getDayOfMonth = function(t) {
    return +formatDayOfMonth(t);
  };

  formatDayOfWeek = d3.time.format("%w");

  getDayOfWeek = function(t) {
    return +formatDayOfWeek(t);
  };

  this.calendarHeatmap = function() {
    var chart, colorScale, z;
    z = function(d) {
      return d.z;
    };
    colorScale = d3.scale.linear().interpolate(d3.interpolateHcl).range(["#e0ecf4", "#4d004b"]);
    chart = function(selection) {
      var CELL_SIZE, MONTH_PADDING, TOP_MARGIN, WEEK_HEIGHT, WIDTH, YEAR_LABEL_OFFSET, defaultDuration, resizeDuration, slideDuration, yearY;
      WIDTH = 960;
      CELL_SIZE = 14;
      TOP_MARGIN = 1.5 * CELL_SIZE;
      MONTH_PADDING = CELL_SIZE;
      YEAR_LABEL_OFFSET = 3 * CELL_SIZE;
      WEEK_HEIGHT = N_WEEKDAYS * CELL_SIZE;
      defaultDuration = 1000;
      resizeDuration = defaultDuration;
      slideDuration = defaultDuration;
      yearY = function(i) {
        return (WEEK_HEIGHT + MONTH_PADDING) * i;
      };
      selection.each(function(data) {
        var d, d0, day, g, gEnter, legend, legendAxis, legendColor, legendEnter, legendInverseScale, legendScale, m0, month, svg, t, t0, y0, year, years, zMax, zMin, _base, _base1, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
        years = {};
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          d = data[_i];
          t = d.t;
          y0 = t.getFullYear();
          m0 = t.getMonth();
          d0 = getDayOfMonth(t);
          t0 = new Date(y0, 0, 1);
          year = (_ref = years[+t0]) != null ? _ref : years[+t0] = {
            t0: t0,
            months: {}
          };
          t0 = new Date(y0, m0, 1);
          month = (_ref1 = (_base = year.months)[+t0]) != null ? _ref1 : _base[+t0] = {
            t0: t0,
            days: {}
          };
          t0 = new Date(y0, m0, d0);
          day = (_ref2 = (_base1 = month.days)[+t0]) != null ? _ref2 : _base1[+t0] = {
            t0: t0,
            z: 0
          };
          day.z += z(d);
        }
        _ref3 = years = d3.values(years);
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          year = _ref3[_j];
          _ref4 = year.months = d3.values(year.months);
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            month = _ref4[_k];
            month.days = d3.values(month.days);
          }
        }
        if (years.length > 0) {
          years.sort(function(a, b) {
            return a.t0 - b.t0;
          });
          zMin = d3.min(years, function(d) {
            return d3.min(d.months, function(d) {
              return d3.min(d.days, function(d) {
                return d.z;
              });
            });
          });
          zMax = d3.max(years, function(d) {
            return d3.max(d.months, function(d) {
              return d3.max(d.days, function(d) {
                return d.z;
              });
            });
          });
          colorScale.domain([zMin, zMax]);
          data = [[years]];
        } else {
          data = [];
        }
        svg = d3.select(this).selectAll("svg").data(data);
        svg.enter().append("svg").attr("height", 0).attr("width", WIDTH);
        svg.transition().duration(resizeDuration).ease("linear").attrTween("height", function(d, i, h0) {
          var h1;
          h1 = d.length > 0 ? TOP_MARGIN + MONTH_PADDING + yearY(d[0].length) : 0;
          if ((h0 != null) && h0 > h1) {
            return function(t) {
              if (t < 1) {
                return h0;
              } else {
                return h1;
              }
            };
          } else {
            return function(t) {
              return h1;
            };
          }
        });
        g = svg.selectAll(".calendar").data(Object, function(d) {
          return 1;
        });
        gEnter = g.enter().append("g").attr("class", "calendar").attr("transform", "translate(" + ((WIDTH - MAX_WEEKS * CELL_SIZE) / 2) + "," + (TOP_MARGIN + MONTH_PADDING) + ")").call(fadeIn);
        gEnter.append("g").attr("transform", "translate(0," + (-MONTH_PADDING) + ")").selectAll("text").data(MONTH_ABBREVIATIONS).enter().append("text").attr("class", "month-label").attr("x", function(d, i) {
          return (i + .5) / N_MONTHS * AVG_WEEKS * CELL_SIZE;
        }).text(String);
        g.exit().call(fadeOut);
        legendScale = d3.scale.linear().domain([0, WEEK_HEIGHT]).rangeRound([zMax, zMin]);
        legendInverseScale = d3.scale.linear().domain(legendScale.range()).range(legendScale.domain());
        legend = g.selectAll(".legend").data(zMin !== zMax ? [1] : []);
        legendEnter = legend.enter().append("g").attr("class", "legend").attr("transform", "translate(" + (MAX_WEEKS * CELL_SIZE + MONTH_PADDING) + ")").call(fadeIn);
        legend.exit().call(fadeOut);
        legendColor = legend.selectAll("rect").data(d3.range(WEEK_HEIGHT + 1));
        legendColor.enter().append("rect").attr("width", CELL_SIZE).attr("height", 1).attr("y", Number);
        legendColor.style("fill", function(d) {
          return colorScale(legendScale(d));
        });
        legendColor.exit().remove();
        legendAxis = d3.svg.axis().scale(legendInverseScale).orient("right").ticks(Math.min(5, zMax - zMin));
        legendEnter.append("g").attr("class", "axis").attr("transform", "translate(" + CELL_SIZE + ")").call(legendAxis);
        legend.selectAll(".axis").transition().duration(defaultDuration).call(legendAxis);
        year = g.selectAll(".year").data(Object, function(d) {
          return +d.t0;
        });
        year.enter().append("g").attr("class", "year").attr("transform", function(d, i) {
          return "translate(" + (-WIDTH / 2) + "," + (yearY(i)) + ")";
        }).call(function(selection) {
          var weekday;
          selection.append("text").attr("class", "year-label").attr("x", -YEAR_LABEL_OFFSET - MONTH_PADDING).attr("y", CELL_SIZE / 2).text(function(d) {
            return d.t0.getFullYear();
          });
          weekday = selection.append("g").attr("transform", "translate(" + (-MONTH_PADDING) + "," + (CELL_SIZE / 2) + ")").selectAll("text").data(DAY_ABBREVIATIONS);
          weekday.enter().append("text").attr("y", function(d, i) {
            return WEEK_HEIGHT - (i + 1) * CELL_SIZE;
          }).text(String);
        }).call(fadeIn);
        year.transition().duration(slideDuration).attr("transform", function(d, i) {
          return "translate(0," + (yearY(i)) + ")";
        });
        year.exit().call(fadeOut);
        month = year.selectAll(".month").data((function(d) {
          return d.months;
        }), function(d) {
          return +d.t0;
        });
        month.enter().append("g").attr("class", "month").each(function(d) {
          var d1, h, m, path, t1, v, w, w0, w1, _l, _m, _ref5, _ref6, _ref7;
          selection = d3.select(this);
          t0 = d.t0;
          t1 = new Date(t0.getFullYear(), t0.getMonth() + 1, 0);
          w0 = getWeek(t0);
          w1 = getWeek(t1);
          d0 = getDayOfWeek(t0);
          d1 = 1 + getDayOfWeek(t1);
          path = [];
          for (d = _l = _ref5 = N_WEEKDAYS - 2; _ref5 <= 0 ? _l <= 0 : _l >= 0; d = _ref5 <= 0 ? ++_l : --_l) {
            m = "M " + ((+(d0 > d) + w0) * CELL_SIZE) + " " + (WEEK_HEIGHT - (d + 1) * CELL_SIZE);
            h = "H " + ((+(d1 > d + 1) + w1) * CELL_SIZE);
            path.push(m, h);
          }
          path.push("M " + ((w0 + 1) * CELL_SIZE) + " 0", "V " + (WEEK_HEIGHT - d0 * CELL_SIZE));
          v = "V " + WEEK_HEIGHT;
          for (w = _m = _ref6 = w0 + 2, _ref7 = w1 - 1; _ref6 <= _ref7 ? _m <= _ref7 : _m >= _ref7; w = _ref6 <= _ref7 ? ++_m : --_m) {
            m = "M " + (w * CELL_SIZE) + " 0";
            path.push(m, v);
          }
          path.push("M " + (w1 * CELL_SIZE) + " " + (WEEK_HEIGHT - d1 * CELL_SIZE), "V " + WEEK_HEIGHT);
          selection.append("path").attr("class", "internal").attr("d", path.join(" "));
          selection.append("path").attr("class", "outline").attr("d", "M " + (w0 * CELL_SIZE) + " 0 " + "H " + (w1 * CELL_SIZE) + " " + "V " + (WEEK_HEIGHT - d1 * CELL_SIZE) + " " + "H " + ((w1 + 1) * CELL_SIZE) + " " + "V " + WEEK_HEIGHT + " " + "H " + ((w0 + 1) * CELL_SIZE) + " " + "V " + (WEEK_HEIGHT - d0 * CELL_SIZE) + " " + "H " + (w0 * CELL_SIZE) + " " + "Z");
        }).call(fadeIn);
        month.exit().call(fadeOut);
        day = month.selectAll(".day").data((function(d) {
          return d.days;
        }), function(d) {
          return +d.t0;
        });
        day.enter().insert("rect", "path").attr("class", "day").attr("width", CELL_SIZE).attr("height", CELL_SIZE).attr("x", function(d) {
          return (getWeek(d.t0)) * CELL_SIZE;
        }).attr("y", function(d) {
          return WEEK_HEIGHT - (1 + getDayOfWeek(d.t0)) * CELL_SIZE;
        }).call(fadeIn).append("title");
        day.style("fill", function(d) {
          return colorScale(d.z);
        }).select("title").text(function(d) {
          return "" + (formatDate(d.t0)) + ": " + d.z;
        });
        return day.exit().call(fadeOut);
      });
    };
    chart.z = function(x) {
      if (!arguments.length) {
        return z;
      } else {
        z = x;
        return chart;
      }
    };
    chart.colorScale = function(x) {
      if (!arguments.length) {
        return colorScale;
      } else {
        colorScale = x;
        return chart;
      }
    };
    return chart;
  };

}).call(this);
