// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var BASE_URL, Set, chart, data, loadData, loginInput, loginLink, network, repoForm, repoFormInput, repoInput, repoLink, showStatus, sinkError, sinkStatus, status, update,
    _this = this;

  Set = (function() {

    function Set() {}

    Set.prototype.contains = function(key) {
      return key in this;
    };

    Set.prototype.insert = function(key) {
      return this[key] = void 0;
    };

    Set.prototype.remove = function(key) {
      return delete this[key];
    };

    return Set;

  })();

  BASE_URL = "https://github.com";

  status = null;

  loginLink = null;

  repoLink = null;

  repoForm = null;

  loginInput = null;

  repoInput = null;

  repoFormInput = null;

  chart = null;

  network = null;

  data = {
    commits: [],
    dirty: false,
    clear: function() {
      this.commits = [];
      this.dirty = true;
    },
    push: function(commit) {
      this.commits.push(commit);
      this.dirty = true;
    }
  };

  showStatus = function(msg, pending) {
    if (pending == null) {
      pending = true;
    }
    status.text(msg);
    repoFormInput.attr("disabled", pending);
  };

  sinkStatus = function(event) {
    switch (event.type) {
      case "meta":
        showStatus("Received metadata...");
        break;
      case "commit":
        showStatus("Received commit " + event.n + " of " + event.total + "...");
    }
  };

  sinkError = function() {
    showStatus("An error occurred or the data is still being generated. " + "Please try again in a few seconds.", false);
  };

  loadData = function(login, repo) {
    var expected, loginUrl, repoUrl, sinkCommit, sinkMeta;
    showStatus("Loading...");
    data.clear();
    loginUrl = "" + BASE_URL + "/" + login;
    loginLink.attr("href", loginUrl).text(login);
    repoUrl = "" + loginUrl + "/" + repo;
    repoLink.attr("href", repoUrl).text(repo);
    if (!((network != null) && network.login === login && network.repo === repo)) {
      network = new Network(login, repo).onError(sinkError).onStatus(sinkStatus);
    }
    expected = new Set();
    sinkCommit = function(commit) {
      var id, parentId, space, time, _i, _len, _ref, _ref1;
      id = commit.id;
      if (expected.contains(id)) {
        data.push({
          t: new Date("" + (commit.date.replace(/-/g, " ")) + " GMT-0800")
        });
        expected.remove(id);
        _ref = commit.parents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], parentId = _ref1[0], time = _ref1[1], space = _ref1[2];
          expected.insert(parentId);
        }
      }
    };
    sinkMeta = function(meta) {
      var head, masterId, user, _i, _j, _len, _len1, _ref, _ref1;
      _ref = meta.users;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        if (user.name === login) {
          _ref1 = user.heads;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            head = _ref1[_j];
            if (head.name === "master") {
              masterId = head.id;
              break;
            }
          }
          break;
        }
      }
      if (masterId != null) {
        expected.insert(masterId);
        network.eachCommit(sinkCommit, function() {
          return showStatus("", false);
        });
      } else {
        showStatus("No master branch was found for this repository.", false);
      }
    };
    network.getMeta(sinkMeta);
  };

  update = function() {
    if (data.dirty) {
      d3.select("#chart").datum(data.commits).call(chart);
      data.dirty = false;
    }
  };

  $(function() {
    status = $("#status");
    loginLink = $("#loginLink");
    repoLink = $("#repoLink");
    repoForm = $("#repoForm");
    loginInput = repoForm.find("input[name=\"login\"]");
    repoInput = repoForm.find("input[name=\"repo\"]");
    repoFormInput = repoForm.find("input");
    chart = calendarHeatmap().z(function() {
      return 1;
    });
    repoForm.submit(function(event) {
      event.preventDefault();
      loadData(loginInput.val(), repoInput.val());
    });
    setInterval(update, 1500);
    loadData("anthonyde", "hubstats");
  });

}).call(this);
